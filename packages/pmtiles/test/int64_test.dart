import 'dart:typed_data';

import 'package:pmtiles/src/int64.dart';
import 'package:test/test.dart';

String byteDataToHex(ByteData bd) {
  final line = List.empty(growable: true);
  for (final b in bd.buffer.asUint8List()) {
    if (b < 16) {
      line.add("0x0${b.toRadixString(16)}");
    } else {
      line.add("0x${b.toRadixString(16)}");
    }
  }

  return "[${line.join(", ")}]";
}

/// Print out test values
void generateTestValues() {
  for (int i = 0; i < 64; i++) {
    final bd = ByteData(8);

    bd.setUint64(0, (1 << i) - 1);
    print("('2^$i-1', '${(1 << i) - 1}', ${byteDataToHex(bd)})");

    bd.setUint64(0, 1 << i);
    print("('2^$i',  '${1 << i}', ${byteDataToHex(bd)})");
  }
}

void main() {
  //generateTestValues();
  final testcases = <(String, String, List<int>)>[
    ('2^0-1', '0', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
    ('2^0', '1', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]),
    ('2^1-1', '1', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]),
    ('2^1', '2', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02]),
    ('2^2-1', '3', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03]),
    ('2^2', '4', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04]),
    ('2^3-1', '7', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07]),
    ('2^3', '8', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08]),
    ('2^4-1', '15', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f]),
    ('2^4', '16', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10]),
    ('2^5-1', '31', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f]),
    ('2^5', '32', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20]),
    ('2^6-1', '63', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f]),
    ('2^6', '64', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40]),
    ('2^7-1', '127', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f]),
    ('2^7', '128', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80]),
    ('2^8-1', '255', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff]),
    ('2^8', '256', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00]),
    ('2^9-1', '511', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff]),
    ('2^9', '512', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00]),
    ('2^10-1', '1023', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff]),
    ('2^10', '1024', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00]),
    ('2^11-1', '2047', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff]),
    ('2^11', '2048', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00]),
    ('2^12-1', '4095', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff]),
    ('2^12', '4096', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00]),
    ('2^13-1', '8191', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff]),
    ('2^13', '8192', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00]),
    ('2^14-1', '16383', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff]),
    ('2^14', '16384', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00]),
    ('2^15-1', '32767', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff]),
    ('2^15', '32768', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00]),
    ('2^16-1', '65535', [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff]),
    ('2^16', '65536', [0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00]),
    ('2^17-1', '131071', [0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff]),
    ('2^17', '131072', [0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00]),
    ('2^18-1', '262143', [0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff]),
    ('2^18', '262144', [0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00]),
    ('2^19-1', '524287', [0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff]),
    ('2^19', '524288', [0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00]),
    ('2^20-1', '1048575', [0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff]),
    ('2^20', '1048576', [0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00]),
    ('2^21-1', '2097151', [0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff]),
    ('2^21', '2097152', [0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00]),
    ('2^22-1', '4194303', [0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff]),
    ('2^22', '4194304', [0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00]),
    ('2^23-1', '8388607', [0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff]),
    ('2^23', '8388608', [0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00]),
    ('2^24-1', '16777215', [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff]),
    ('2^24', '16777216', [0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00]),
    ('2^25-1', '33554431', [0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff]),
    ('2^25', '33554432', [0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00]),
    ('2^26-1', '67108863', [0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff]),
    ('2^26', '67108864', [0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00]),
    ('2^27-1', '134217727', [0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff]),
    ('2^27', '134217728', [0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00]),
    ('2^28-1', '268435455', [0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff]),
    ('2^28', '268435456', [0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00]),
    ('2^29-1', '536870911', [0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff]),
    ('2^29', '536870912', [0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00]),
    ('2^30-1', '1073741823', [0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff]),
    ('2^30', '1073741824', [0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00]),
    ('2^31-1', '2147483647', [0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff]),
    ('2^31', '2147483648', [0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00]),
    ('2^32-1', '4294967295', [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]),
    ('2^32', '4294967296', [0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00]),
    ('2^33-1', '8589934591', [0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff]),
    ('2^33', '8589934592', [0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00]),
    ('2^34-1', '17179869183', [0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff]),
    ('2^34', '17179869184', [0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00]),
    ('2^35-1', '34359738367', [0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff]),
    ('2^35', '34359738368', [0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00]),
    ('2^36-1', '68719476735', [0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff]),
    ('2^36', '68719476736', [0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^37-1',
      '137438953471',
      [0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff]
    ),
    ('2^37', '137438953472', [0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^38-1',
      '274877906943',
      [0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff]
    ),
    ('2^38', '274877906944', [0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^39-1',
      '549755813887',
      [0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff]
    ),
    ('2^39', '549755813888', [0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^40-1',
      '1099511627775',
      [0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    ('2^40', '1099511627776', [0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^41-1',
      '2199023255551',
      [0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    ('2^41', '2199023255552', [0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^42-1',
      '4398046511103',
      [0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    ('2^42', '4398046511104', [0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^43-1',
      '8796093022207',
      [0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    ('2^43', '8796093022208', [0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00]),
    (
      '2^44-1',
      '17592186044415',
      [0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^44',
      '17592186044416',
      [0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^45-1',
      '35184372088831',
      [0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^45',
      '35184372088832',
      [0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^46-1',
      '70368744177663',
      [0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^46',
      '70368744177664',
      [0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^47-1',
      '140737488355327',
      [0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^47',
      '140737488355328',
      [0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^48-1',
      '281474976710655',
      [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^48',
      '281474976710656',
      [0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^49-1',
      '562949953421311',
      [0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^49',
      '562949953421312',
      [0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^50-1',
      '1125899906842623',
      [0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^50',
      '1125899906842624',
      [0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^51-1',
      '2251799813685247',
      [0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^51',
      '2251799813685248',
      [0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^52-1',
      '4503599627370495',
      [0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^52',
      '4503599627370496',
      [0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^53-1',
      '9007199254740991',
      [0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^53',
      '9007199254740992',
      [0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
  ];

  // Larger than 2^52
  final bigTestcases = <(String, String, List<int>)>[
    (
      '2^54-1',
      '18014398509481983',
      [0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^54',
      '18014398509481984',
      [0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^55-1',
      '36028797018963967',
      [0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^55',
      '36028797018963968',
      [0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^56-1',
      '72057594037927935',
      [0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^56',
      '72057594037927936',
      [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^57-1',
      '144115188075855871',
      [0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^57',
      '144115188075855872',
      [0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^58-1',
      '288230376151711743',
      [0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^58',
      '288230376151711744',
      [0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^59-1',
      '576460752303423487',
      [0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^59',
      '576460752303423488',
      [0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^60-1',
      '1152921504606846975',
      [0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^60',
      '1152921504606846976',
      [0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^61-1',
      '2305843009213693951',
      [0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^61',
      '2305843009213693952',
      [0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^62-1',
      '4611686018427387903',
      [0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^62',
      '4611686018427387904',
      [0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
    (
      '2^63-1',
      '9223372036854775807',
      [0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
    ),
    (
      '2^63',
      '-9223372036854775808',
      [0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ),
  ];

  for (final endian in [Endian.big, Endian.little]) {
    group('getFixNumUint64 (<=2^53, $endian)', () {
      for (final t in testcases) {
        test(t.$1, () {
          final bd = ByteData(8);
          bd.buffer
              .asUint8List()
              .setAll(0, endian == Endian.big ? t.$3 : t.$3.reversed);

          expect(bd.getSafeUint64(0, endian).toString(), t.$2, reason: t.$1);
        });
      }
    });

    group('getFixNumUint64 (>2^53, $endian)', () {
      for (final t in bigTestcases) {
        test(t.$1, () {
          final bd = ByteData(8);
          bd.buffer
              .asUint8List()
              .setAll(0, endian == Endian.big ? t.$3 : t.$3.reversed);

          expect(bd.getSafeUint64(0, endian).toString(), t.$2, reason: t.$1);
        });
      }
    }, testOn: "!js");

    group('getFixNumUint64 (>2^53, $endian)', () {
      for (final t in bigTestcases) {
        test(t.$1, () {
          final bd = ByteData(8);
          bd.buffer
              .asUint8List()
              .setAll(0, endian == Endian.big ? t.$3 : t.$3.reversed);

          expect(() => bd.getSafeUint64(0, endian), throwsUnsupportedError,
              reason: t.$1);
        });
      }
    }, testOn: "js");
  }
}
